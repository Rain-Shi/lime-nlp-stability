---
title: "📊 Dataset Overview"
format: 
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    code-fold: true
jupyter: python3
---

## 📂 Dataset Description

This project uses the **Twitter Entity Sentiment Analysis** dataset, composed of:

- `twitter_training.csv`: Main training dataset  
- `twitter_validation.csv`: Validation dataset  

Each row contains:
- `id`: unique identifier  
- `entity`: the target subject  
- `sentiment`: one of `Positive`, `Neutral`, `Negative`, or `Irrelevant`  
- `tweet`: the tweet content  

🎯 **Task**: Predict the sentiment expressed toward the entity.

## 📥 Load Data
```{python}
import pandas as pd

col_names = ["id", "entity", "sentiment", "tweet"]

train = pd.read_csv("data/twitter_training.csv", header=None, names=col_names)
valid = pd.read_csv("data/twitter_validation.csv", header=None, names=col_names)

# Remove missing/empty tweets
train = train.dropna(subset=["tweet"])
train = train[train["tweet"].str.strip().astype(bool)]
```

## 📐 Dataset Dimensions
```{python}
shape_df = pd.DataFrame({
    "Dataset": ["Training Set", "Validation Set"],
    "Rows": [train.shape[0], valid.shape[0]],
    "Columns": [train.shape[1], valid.shape[1]]
})
shape_df
```

## 📋 Column Names
```{python}
pd.DataFrame({"Columns": train.columns})
```

## 📊 Sentiment Label Counts
```{python}
sentiment_df = train['sentiment'].value_counts().sort_values(ascending=False).reset_index()
sentiment_df.columns = ["Sentiment", "Count"]
sentiment_df
```

## 🧪 Sample Records
```{python}
train.sample(5)[["tweet", "entity", "sentiment"]]
```

## 🚨 Missing Value Check
```{python}
missing_df = train.isnull().sum().reset_index()
missing_df.columns = ["Column", "Missing Values"]
missing_df
```

## 📉 Sentiment Distribution
```{python}
import seaborn as sns
import matplotlib.pyplot as plt

sns.set_theme(style="whitegrid")
palette = sns.color_palette("Set2")

fig, axes = plt.subplots(1, 2, figsize=(13, 5))

sns.countplot(data=train, x="sentiment", 
              order=["Positive", "Neutral", "Negative", "Irrelevant"],
              palette=palette, ax=axes[0])
axes[0].set_title("Training Sentiment Distribution", fontsize=13)
axes[0].set_ylabel("Count")

sns.countplot(data=valid, x="sentiment", 
              order=["Positive", "Neutral", "Negative", "Irrelevant"],
              palette=palette, ax=axes[1])
axes[1].set_title("Validation Sentiment Distribution", fontsize=13)
axes[1].set_ylabel("")

plt.tight_layout()
plt.show()
```

## ✅ Summary
- The training set has **~74,000** records; validation has **~1,000**
- **686 empty tweets** were removed from training
- `Neutral` is the most common label — indicating an **imbalanced** distribution